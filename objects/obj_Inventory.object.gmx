<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Created 2/10/17
First pass at inventory system, lots of hardcoding of numbers that need to be changed
Used in the inventory test room
*/

globalvar showInv;
globalvar maxItems;
globalvar savedInventory;
globalvar savedEquippedItems;
showInv = false;
maxItems = 16;
global.objectHeld = -1;
global.takenFromX = -1;
global.takenFromY = -1;
displayItemInfo = false;
itemToDisplay = -1;

enum equipSlots{
    HEAD,
    CHEST,
    LEGS,
    GLOVES,
    FEET,
    WEAPON
}

//initialize inventory to -1 to inidcate no items in those slots
for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        global.inventory[i,j] = -1;
    }
}

//initialize equipped items to -1
for (i = 0; i &lt; 6; i++){
    global.equippedItems[i] = -1;
}

//where to put instances in map that are in inventory?
//starting weapon is measly pistol
newWeapon = instance_create(-10,-10, obj_Weapon);
newHelmet = instance_create(-10,-10, obj_Helmet);
global.equippedItems[equipSlots.WEAPON] = newWeapon;
global.equippedItems[equipSlots.HEAD] = newHelmet;

//testing
//global.inventory[0,0] = instance_create(0,0,obj_testWeapon);

/*SAVING INVENTORY ACROSS ROOMS*/
for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        savedInventory[i,j] = -1;
    }
}

for (i = 0; i &lt; 6; i++){
    savedEquippedItems[i] = -1;
}

derp[0] = 6;
derp[1] = newWeapon.damage;
derp[2] = newWeapon.fireRate;
savedEquippedItems[equipSlots.WEAPON] = derp;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var x1,x2,y1,y2;
x1 = view_xview[0] + 256;
x2 = x1 + 166;
y1 = view_yview[0] + 256;
y2 = y1 + 360;
initOff = 24;
initSpace = 40;
boxDimension = 32;
midx = (x1 + x2) / 2;
midy = (y1 + y2) / 2;
weaponX = midx + 40;
weaponY = midy + initOff + (1 * initSpace);


if(showInv){
    foundOne = false;
    for (i = 0; i &lt; 4; i++){
        for (j = 0; j &lt; 4; j++){
            boxCenterX = x1 + initOff + (i * initSpace);
            boxCenterY = y1 + initOff + (j * initSpace);
            if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] != -1){
                foundOne = true;
                displayItemInfo = true;
                itemToDisplay = global.inventory[i,j];
            }
            else if (i == 3 &amp;&amp; j == 3 &amp;&amp; foundOne = false){
                displayItemInfo = false;
                itemToDisplay = -1;
            }
        }
    }
    
    if(scr_MouseInBox(weaponX, weaponY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.WEAPON] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.WEAPON]
    }

    if(mouse_check_button_pressed(mb_left) &amp;&amp; global.objectHeld == -1){
        //this does checking for normal inventory slots
        for (i = 0; i &lt; 4; i++){
            for (j = 0; j &lt; 4 &amp;&amp; global.objectHeld = -1; j++){
                boxCenterX = x1 + initOff + (i * initSpace);
                boxCenterY = y1 + initOff + (j * initSpace);
                if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] != -1){
                    global.objectHeld = global.inventory[i,j];
                    global.takenFromX = i;
                    global.takenFromY = j;
                    global.inventory[i,j] = -1;
                }
            }
        }
        //now check equippable slots
        if(scr_MouseInBox(weaponX, weaponY, boxDimension)){
            scr_itemPickup(global.equippedItems[equipSlots.WEAPON]);
            global.equippedItems[equipSlots.WEAPON] = -1;
        }
        
    }
    
    else if(mouse_check_button_pressed(mb_left) &amp;&amp; global.objectHeld != -1){
        
        //now check equippable slots 
        //check for weapon slot
        if(scr_MouseInBox(weaponX, weaponY, boxDimension)){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.WEAPON];
            global.equippedItems[equipSlots.WEAPON] = global.objectHeld;
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
    
        //this does checking for normal inventory slots
        for (i = 0; i &lt; 4; i++){
            for (j = 0; j &lt; 4; j++){
                boxCenterX = x1 + initOff + (i * initSpace);
                boxCenterY = y1 + initOff + (j * initSpace);
                //if placing in empty, simply place and register new location
                if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] == -1){
                    global.inventory[i,j] = global.objectHeld;
                    global.objectHeld = -1;
                }
                //if placing in taken spot, swap the locations of the items
                else if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] != -1){
                    global.inventory[global.takenFromX,global.takenFromY] = global.inventory[i,j];
                    global.inventory[i,j] = global.objectHeld;
                    global.objectHeld = -1;
                    global.takenFromX = -1;
                    global.takenFromY = -1;
                }
                
            }
        }
        //if reached here and held object is not -1, no valid inventory slot chosen
        //if clicked outside of inventory screen drop the weapon
        if(global.objectHeld != -1 &amp;&amp; !scr_MouseInInventory(midx, midy, 166, 360)){
            global.objectHeld.x = mouse_x;
            global.objectHeld.y = mouse_y;
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        savedItem = -1;
        if (global.inventory[i,j] != -1){
            savedItem[0] = global.inventory[i,j].object_index;
            savedItem[1] = global.inventory[i,j].damage;
            savedItem[2] = global.inventory[i,j].fireRate;
        }
        //save properties
        savedInventory[i,j] = savedItem;
    }
}

for (i = 0; i &lt; 6; i++){
    savedEquippedItems[i] = -1;
}

if (global.equippedItems[equipSlots.WEAPON] != -1){
    savedItem[0] = global.equippedItems[equipSlots.WEAPON].object_index;
    savedItem[1] = global.equippedItems[equipSlots.WEAPON].damage;
    savedItem[2] = global.equippedItems[equipSlots.WEAPON].fireRate;
    savedEquippedItems[equipSlots.WEAPON] = savedItem;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        savedItem = -1;
        if (global.inventory[i,j] != -1){
            savedItem[0] = global.inventory[i,j].object_index;
            savedItem[1] = global.inventory[i,j].damage;
        }
        //save properties
        savedInventory[i,j] = savedItem;
    }
}

for (i = 0; i &lt; 6; i++){
    savedEquippedItems[i] = -1;
}

if (global.equippedItems[equipSlots.WEAPON] != -1){
    savedItem[0] = global.equippedItems[equipSlots.WEAPON].object_index;
    savedItem[1] = global.equippedItems[equipSlots.WEAPON].damage;
    savedEquippedItems[equipSlots.WEAPON] = savedItem;
}*/

for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        if (global.savedInventory[i,j] != -1){
            //create new instances based on the properties
            savedItem = savedInventory[i,j];
            newInstance = instance_create(-1,-1,savedItem[0]);
            newInstance.damage = savedItem[1];
            newInstance.fireRate = savedItem[2];
            global.inventory[i,j] = newInstance;
        }
    }
}

if (global.savedEquippedItems[equipSlots.WEAPON] != -1){
    savedItem = global.savedEquippedItems[equipSlots.WEAPON];
    newInstance = instance_create(-1,-1,savedItem[0]);
    newInstance.damage = savedItem[1];
    newInstance.fireRate = savedItem[2];
    global.equippedItems[equipSlots.WEAPON] = newInstance;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (showInv){
    var x1,x2,y1,y2;
    x1 = view_xview[0] + 256;
    x2 = x1 + 166;
    y1 = view_yview[0] + 256;
    y2 = y1 + 360;
    
    initOff = 24;
    initSpace = 40;
    
    draw_set_color(c_black);
    draw_set_alpha(0.8);
    draw_rectangle(x1,y1,x2,y2,0);
    draw_set_alpha(1);
    
    //draw inventory for pickups
    for (i = 0; i &lt; 4; i++){
        for (j = 0; j &lt; 4; j++){
            draw_sprite(spr_Border,0,x1 + initOff + (i * initSpace), y1 + initOff + (j * initSpace));
            if (global.inventory[i,j] != -1){
                draw_sprite(global.inventory[i,j].sprite_index, 0, x1 + initOff + (i * initSpace), y1 + initOff + (j * initSpace));
            }
        }
    }
    
    midx = (x1 + x2) / 2;
    midy = (y1 + y2) / 2;
    
    //draw inventory for equippable items
    for (i = 0; i &lt; 4; i++){
        draw_sprite(spr_Border,0,midx, midy + initOff + (i * initSpace));
    }
    draw_sprite(spr_Border,0,midx + initSpace, midy + initOff + initSpace);
    draw_sprite(spr_Border,0,midx - initSpace, midy + initOff + initSpace);
    for (i = 0; i &lt; 6; i++){
        if(global.equippedItems[i] != -1){
            if(i = equipSlots.HEAD){
                draw_sprite(global.equippedItems[i].sprite_index, 0, midx, midy + initOff + (0 * initSpace));
            }
            if(i = equipSlots.CHEST){
                draw_sprite(global.equippedItems[i].sprite_index, 0, midx, midy + initOff + (1 * initSpace));
            }
            if(i = equipSlots.LEGS){
                draw_sprite(global.equippedItems[i].sprite_index, 0, midx, midy + initOff + (2 * initSpace));
            }
            if(i = equipSlots.FEET){
                draw_sprite(global.equippedItems[i].sprite_index, 0, midx, midy + initOff + (3 * initSpace));
            }
            if(i = equipSlots.WEAPON){
                draw_sprite(global.equippedItems[i].sprite_index, 0, midx + 40, midy + initOff + (1 * initSpace));
            }
            if(i = equipSlots.GLOVES){
                draw_sprite(global.equippedItems[i].sprite_index, 0, midx - 40, midy + initOff + (1 * initSpace));
            } 
        }
    }
    
    if (global.objectHeld != -1){
        draw_sprite(global.objectHeld.sprite_index, 0, mouse_x, mouse_y);
    }
    
    if(displayItemInfo){
        if(itemToDisplay.itemType == equipSlots.WEAPON){
            draw_set_color(c_black);
            draw_rectangle(mouse_x, mouse_y, mouse_x + 200, mouse_y - 50,0);
            draw_set_color(c_white);
            draw_text(mouse_x + 10, mouse_y - 20, "Damage: " + string(itemToDisplay.damage));
        }
    }
    draw_set_color(c_black);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
