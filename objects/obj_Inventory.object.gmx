<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Created 2/10/17
First pass at inventory system, lots of hardcoding of numbers that need to be changed
Used in the inventory test room
*/

x1 = view_xport[view_current] + 650;
y1 = view_yport[view_current] + 25;
x2 = x1 + 166 * 2;
y2 = y1 + 360 * 2;
invHalfWidth = 166;//make dynamic
invHalfHeight = 360;//make dynamic
initOff = 24 * 2;
initSpace = 40 * 2;
boxDimension = 32 * 2;
midx = (x1 + x2) / 2;
midy = (y1 + y2) / 2;
weaponX = midx + initSpace;
weaponY = midy + initOff + (1 * initSpace);
headX = midx;
headY = midy + initOff + (0 * initSpace);
globalvar m_x;
globalvar m_y;
m_x = mouse_x - view_xview[0];
m_y = mouse_y - view_yview[0];

globalvar rubles;
rubles = 0;
globalvar showInv;
globalvar maxItems;
globalvar savedInventory;
globalvar savedEquippedItems;
showInv = false;
maxItems = 16;
global.objectHeld = -1;
global.takenFromX = -1;
global.takenFromY = -1;
displayItemInfo = false;
itemToDisplay = -1;
itemCanBeSold = false;

enum equipSlots{
    HEAD,
    CHEST,
    LEGS,
    GLOVES,
    FEET,
    WEAPON
}

enum weaponType{
    PISTOL = 0,
    AR = 1,
    SHOTGUN = 2
}

//initialize inventory to -1 to inidcate no items in those slots
for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        global.inventory[i,j] = -1;
    }
}
//initialize equipped items to -1
for (i = 0; i &lt; 6; i++){
    global.equippedItems[i] = -1;
}
/*SAVING INVENTORY ACROSS ROOMS*/
for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        savedInventory[i,j] = -1;
    }
}
for (i = 0; i &lt; 6; i++){
    savedEquippedItems[i] = -1;
}

global.savedMaxHealth = 100;
global.savedHealth = 100;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x1 = view_xport[view_current] + 650;
y1 = view_yport[view_current] + 25;
x2 = x1 + 166 * 2;
y2 = y1 + 360 * 2;
invHalfWidth = 166;//make dynamic
invHalfHeight = 360;//make dynamic
initOff = 24 * 2;
initSpace = 40 * 2;
boxDimension = 32 * 2;
midx = (x1 + x2) / 2;
midy = (y1 + y2) / 2;
weaponX = midx + initSpace;
weaponY = midy + initOff + (1 * initSpace);
headX = midx;
headY = midy + initOff + (0 * initSpace);
chestX = midx;
chestY = midy + initOff + (1 * initSpace);
legsX = midx;
legsY = midy +initOff + (2 * initSpace);
feetX = midx;
feetY = midy +initOff + (3 * initSpace);
glovesX = midx - initSpace;
glovesY = midy + initOff + (1 * initSpace);
m_x = mouse_x - view_xview[0];
m_y = mouse_y - view_yview[0];

//for toggling the inventory, only available in testing room as of 2/10/17
if (keyboard_check_pressed(ord("I"))){
    showInv = !showInv;
    if(showInv == false &amp;&amp; global.objectHeld != -1){
        global.inventory[global.takenFromX, global.takenFromY] = global.objectHeld;
        global.objectHeld = -1;
        global.takenFromX = -1;
        global.takenFromY = -1;
    }
}

if(showInv){
    sellX = -1;
    sellY = -1;
    foundOne = false;
    //check if we are hovering over any regular inventory slots with the mouse
    for (i = 0; i &lt; 4; i++){
        for (j = 0; j &lt; 4; j++){
            boxCenterX = x1 + initOff + (i * initSpace);
            boxCenterY = y1 + initOff + (j * initSpace);
            if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] != -1){
                foundOne = true;
                displayItemInfo = true;
                itemToDisplay = global.inventory[i,j];
                sellX = i;
                sellY = j;
            }
            else if (i == 3 &amp;&amp; j == 3 &amp;&amp; foundOne = false){
                displayItemInfo = false;
                itemToDisplay = -1;
                sellX = -1;
                sellY = -1;
            }
        }
    }
    
    //CHECK IF WE ARE HOVERING OVER ANY EQUIPPED ITEM SLOTS WITH THE MOUSE
    
    if(scr_MouseInBox(weaponX, weaponY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.WEAPON] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.WEAPON];
    }
    
    if(scr_MouseInBox(headX, headY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.HEAD] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.HEAD];
    }
    
    if(scr_MouseInBox(chestX, chestY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.CHEST] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.CHEST];
    }
    
    if(scr_MouseInBox(legsX, legsY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.LEGS] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.LEGS];
    }
    
    if(scr_MouseInBox(feetX, feetY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.FEET] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.FEET];
    }
    
    if(scr_MouseInBox(glovesX, glovesY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.GLOVES] != -1){
        foundOne = true;
        displayItemInfo = true;
        itemToDisplay = global.equippedItems[equipSlots.GLOVES];
    }
    //

    //IF WE JUST CLICKED AND WERE NOT HOLDING ANYTHING, GRAB WHAT WAS IN THE SLOT IF IT WAS REGULAR INVENTORY
    //OR UNEQUIP AN EQUIPPED ITEM IF IT WAS CLICKED
    if(mouse_check_button_pressed(mb_left) &amp;&amp; global.objectHeld == -1){
        //this does checking for normal inventory slots
        for (i = 0; i &lt; 4; i++){
            for (j = 0; j &lt; 4 &amp;&amp; global.objectHeld = -1; j++){
                boxCenterX = x1 + initOff + (i * initSpace);
                boxCenterY = y1 + initOff + (j * initSpace);
                if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] != -1){
                    global.objectHeld = global.inventory[i,j];
                    global.takenFromX = i;
                    global.takenFromY = j;
                    global.inventory[i,j] = -1;
                }
            }
        }
        //PROPERLY UNEQUIP THE RESPECTIVE EQUIPPED SLOT
        if(obj_Player.numObj &lt; 16){
            if(scr_MouseInBox(weaponX, weaponY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.WEAPON] != -1){
                scr_itemPickup(global.equippedItems[equipSlots.WEAPON]);
                global.equippedItems[equipSlots.WEAPON] = -1;
            }
            
            if(scr_MouseInBox(headX, headY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.HEAD] != -1){
                scr_itemPickup(global.equippedItems[equipSlots.HEAD]);
                obj_Player.maxHealth -= global.equippedItems[equipSlots.HEAD].health_bonus;
                obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
                global.equippedItems[equipSlots.HEAD] = -1;
            }
            
            if(scr_MouseInBox(chestX, chestY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.CHEST] != -1){
                scr_itemPickup(global.equippedItems[equipSlots.CHEST]);
                obj_Player.maxHealth -= global.equippedItems[equipSlots.CHEST].health_bonus;
                obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
                global.equippedItems[equipSlots.CHEST] = -1;
            }
            
            if(scr_MouseInBox(legsX, legsY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.LEGS] != -1){
                scr_itemPickup(global.equippedItems[equipSlots.LEGS]);
                obj_Player.maxHealth -= global.equippedItems[equipSlots.LEGS].health_bonus;
                obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
                global.equippedItems[equipSlots.LEGS] = -1;
            }
            
            if(scr_MouseInBox(feetX, feetY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.FEET] != -1){
                scr_itemPickup(global.equippedItems[equipSlots.FEET]);
                obj_Player.maxHealth -= global.equippedItems[equipSlots.FEET].health_bonus;
                obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
                global.equippedItems[equipSlots.FEET] = -1;
            }
            
            if(scr_MouseInBox(glovesX, glovesY, boxDimension) &amp;&amp; global.equippedItems[equipSlots.GLOVES] != -1){
                scr_itemPickup(global.equippedItems[equipSlots.GLOVES]);
                obj_Player.maxHealth -= global.equippedItems[equipSlots.GLOVES].health_bonus;
                obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
                global.equippedItems[equipSlots.GLOVES] = -1;
            }
        }else{
            //LET THE USER KNOW THEIR INVENTORY IS FULL
        }
        //
    }
    
    //IF WE JUST CLICKED AND WE WERE HOLDING AN OBJECT
    else if(mouse_check_button_pressed(mb_left) &amp;&amp; global.objectHeld != -1){
        
        //CHECK IF WERE IN EQUIPPABLE SLOTS, EQUIP/UNEQUIP AS NECESSARY
        if(scr_MouseInBox(weaponX, weaponY, boxDimension) &amp;&amp; global.objectHeld.itemType == equipSlots.WEAPON){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.WEAPON];
            global.equippedItems[equipSlots.WEAPON] = global.objectHeld;
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
        
        if(scr_MouseInBox(headX, headY, boxDimension)&amp;&amp; global.objectHeld.itemType == equipSlots.HEAD){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.HEAD];
            if(global.equippedItems[equipSlots.HEAD] != -1){
                obj_Player.maxHealth -= global.equippedItems[equipSlots.HEAD].health_bonus;
            }
            global.equippedItems[equipSlots.HEAD] = global.objectHeld;
            obj_Player.maxHealth += global.equippedItems[equipSlots.HEAD].health_bonus;
            obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
        
        if(scr_MouseInBox(chestX, chestY, boxDimension)&amp;&amp; global.objectHeld.itemType == equipSlots.CHEST){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.CHEST];
            if(global.equippedItems[equipSlots.CHEST] != -1){
                obj_Player.maxHealth -= global.equippedItems[equipSlots.CHEST].health_bonus;
            }
            global.equippedItems[equipSlots.CHEST] = global.objectHeld;
            obj_Player.maxHealth += global.equippedItems[equipSlots.CHEST].health_bonus;
            obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
        
        if(scr_MouseInBox(legsX, legsY, boxDimension)&amp;&amp; global.objectHeld.itemType == equipSlots.LEGS){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.LEGS];
            if(global.equippedItems[equipSlots.LEGS] != -1){
                obj_Player.maxHealth -= global.equippedItems[equipSlots.LEGS].health_bonus;
            }
            global.equippedItems[equipSlots.LEGS] = global.objectHeld;
            obj_Player.maxHealth += global.equippedItems[equipSlots.LEGS].health_bonus;
            obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
        
        if(scr_MouseInBox(feetX, feetY, boxDimension)&amp;&amp; global.objectHeld.itemType == equipSlots.FEET){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.FEET];
            if(global.equippedItems[equipSlots.FEET] != -1){
                obj_Player.maxHealth -= global.equippedItems[equipSlots.FEET].health_bonus;
            }
            global.equippedItems[equipSlots.FEET] = global.objectHeld;
            obj_Player.maxHealth += global.equippedItems[equipSlots.FEET].health_bonus;
            obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
        
        if(scr_MouseInBox(glovesX, glovesY, boxDimension)&amp;&amp; global.objectHeld.itemType == equipSlots.GLOVES){
            global.inventory[global.takenFromX,global.takenFromY] = global.equippedItems[equipSlots.GLOVES];
            if(global.equippedItems[equipSlots.GLOVES] != -1){
                obj_Player.maxHealth -= global.equippedItems[equipSlots.GLOVES].health_bonus;
            }
            global.equippedItems[equipSlots.GLOVES] = global.objectHeld;
            obj_Player.maxHealth += global.equippedItems[equipSlots.GLOVES].health_bonus;
            obj_Player.health = clamp(health, 0,obj_Player.maxHealth);
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }
        //
    
        //this does checking for normal inventory slots
        for (i = 0; i &lt; 4; i++){
            for (j = 0; j &lt; 4; j++){
                boxCenterX = x1 + initOff + (i * initSpace);
                boxCenterY = y1 + initOff + (j * initSpace);
                //if placing in empty, simply place and register new location
                if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] == -1){
                    global.inventory[i,j] = global.objectHeld;
                    global.objectHeld = -1;
                }
                //if placing in taken spot, swap the locations of the items
                else if(scr_MouseInBox(boxCenterX, boxCenterY, boxDimension) &amp;&amp; global.inventory[i,j] != -1){
                    global.inventory[global.takenFromX,global.takenFromY] = global.inventory[i,j];
                    global.inventory[i,j] = global.objectHeld;
                    global.objectHeld = -1;
                    global.takenFromX = -1;
                    global.takenFromY = -1;
                }
                
            }
        }
        //if reached here and held object is not -1, no valid inventory slot chosen
        //if clicked outside of inventory screen drop the weapon
        if(global.objectHeld != -1 &amp;&amp; !scr_MouseInInventory(midx, midy, invHalfWidth, invHalfHeight)){
            //global.objectHeld.x = mouse_x;
            //global.objectHeld.y = mouse_y;
            deg = random_range(0,360);
            newX = 30*cos(deg);
            newY = 30*sin(deg)*-1.0;
            global.objectHeld.x = obj_Player.x + newX;
            global.objectHeld.y = obj_Player.y + newY;
            global.objectHeld = -1;
            global.takenFromX = -1;
            global.takenFromY = -1;
        }

    }//END CLICKED WHILE HOLDING AN OBJECT
    
    itemCanBeSold = false; // makes it so you cant sell equipped items
    if(instance_exists(obj_Merchant) == true){
        itemCanBeSold = (itemToDisplay != -1 &amp;&amp; sellX != -1 &amp;&amp; sellY != -1);
        if(obj_Merchant.interacting == true &amp;&amp; mouse_check_button_pressed(mb_right) &amp;&amp; itemCanBeSold == true){
            displayItemInfo = false;
            rubles+= floor(itemToDisplay.price * 0.5);
            with(itemToDisplay){
                instance_destroy();
            }
            global.inventory[sellX, sellY] = -1;
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//SAVING REGULAR INVENTORY SLOTS
for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        savedItem = -1;
        if (global.inventory[i,j] != -1){
        
            if(global.inventory[i,j].itemType == equipSlots.WEAPON){
                savedItem[0] = global.inventory[i,j].object_index;
                savedItem[1] = equipSlots.WEAPON;
                savedItem[2] = global.inventory[i,j].damage;
                savedItem[3] = global.inventory[i,j].fireRate;
                savedItem[4] = global.inventory[i,j].currentAmmo;
            }
            
            if(global.inventory[i,j].itemType == equipSlots.HEAD){
                savedItem[0] = global.inventory[i,j].object_index;
                savedItem[1] = equipSlots.HEAD;
                savedItem[2] = global.inventory[i,j].health_bonus;
            }
            
            if(global.inventory[i,j].itemType == equipSlots.CHEST){
                savedItem[0] = global.inventory[i,j].object_index;
                savedItem[1] = equipSlots.CHEST;
                savedItem[2] = global.inventory[i,j].health_bonus;
            }
            
            if(global.inventory[i,j].itemType == equipSlots.LEGS){
                savedItem[0] = global.inventory[i,j].object_index;
                savedItem[1] = equipSlots.LEGS;
                savedItem[2] = global.inventory[i,j].health_bonus;
            }
            
            if(global.inventory[i,j].itemType == equipSlots.FEET){
                savedItem[0] = global.inventory[i,j].object_index;
                savedItem[1] = equipSlots.FEET;
                savedItem[2] = global.inventory[i,j].health_bonus;
            }
            
            if(global.inventory[i,j].itemType == equipSlots.GLOVES){
                savedItem[0] = global.inventory[i,j].object_index;
                savedItem[1] = equipSlots.GLOVES;
                savedItem[2] = global.inventory[i,j].health_bonus;
            }
        }
        //save properties
        savedInventory[i,j] = savedItem;
    }
}

//SAVING EQUIPPED ITEMS
for (i = 0; i &lt; 6; i++){
    savedEquippedItems[i] = -1;
}

savedWeapon = -1;
savedHelmet = -1;
savedChest = -1;
savedLegs = -1;
savedFeet = -1;
savedGloves = -1;

if (global.equippedItems[equipSlots.WEAPON] != -1){
    savedWeapon[0] = global.equippedItems[equipSlots.WEAPON].object_index;
    savedWeapon[1] = equipSlots.WEAPON;
    savedWeapon[2] = global.equippedItems[equipSlots.WEAPON].damage;
    savedWeapon[3] = global.equippedItems[equipSlots.WEAPON].fireRate;
    savedWeapon[4] = global.equippedItems[equipSlots.WEAPON].currentAmmo;
    savedEquippedItems[equipSlots.WEAPON] = savedWeapon;
}

if (global.equippedItems[equipSlots.HEAD] != -1){
    savedHelmet[0] = global.equippedItems[equipSlots.HEAD].object_index;
    savedHelmet[1] = equipSlots.HEAD;
    savedHelmet[2] = global.equippedItems[equipSlots.HEAD].health_bonus;
    savedEquippedItems[equipSlots.HEAD] = savedHelmet;
}

if (global.equippedItems[equipSlots.CHEST] != -1){
    savedChest[0] = global.equippedItems[equipSlots.CHEST].object_index;
    savedChest[1] = equipSlots.CHEST;
    savedChest[2] = global.equippedItems[equipSlots.CHEST].health_bonus;
    savedEquippedItems[equipSlots.CHEST] = savedChest;
}

if (global.equippedItems[equipSlots.LEGS] != -1){
    savedLegs[0] = global.equippedItems[equipSlots.LEGS].object_index;
    savedLegs[1] = equipSlots.LEGS;
    savedLegs[2] = global.equippedItems[equipSlots.LEGS].health_bonus;
    savedEquippedItems[equipSlots.LEGS] = savedLegs;
}

if (global.equippedItems[equipSlots.FEET] != -1){
    savedFeet[0] = global.equippedItems[equipSlots.FEET].object_index;
    savedFeet[1] = equipSlots.FEET;
    savedFeet[2] = global.equippedItems[equipSlots.FEET].health_bonus;
    savedEquippedItems[equipSlots.FEET] = savedFeet;
}

if (global.equippedItems[equipSlots.GLOVES] != -1){
    savedGloves[0] = global.equippedItems[equipSlots.GLOVES].object_index;
    savedGloves[1] = equipSlots.GLOVES;
    savedGloves[2] = global.equippedItems[equipSlots.GLOVES].health_bonus;
    savedEquippedItems[equipSlots.GLOVES] = savedGloves;
}

if(instance_exists(obj_Player)){
    global.savedHealth = obj_Player.health;
    global.savedMaxHealth = obj_Player.maxHealth;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//LOADING REGULAR INVENTORY SLOTS
for (i = 0; i &lt; 4; i++){
    for (j = 0; j &lt; 4; j++){
        if (savedInventory[i,j] != -1){
            savedItem = savedInventory[i,j];
            
            //create new instances based on the properties
            if(savedItem[1] == equipSlots.WEAPON){
                newInstance = instance_create(-10,-10,savedItem[0]);
                newInstance.damage = savedItem[2];
                newInstance.fireRate = savedItem[3];
                newInstance.currentAmmo = savedItem[4];
                global.inventory[i,j] = newInstance;
            }
            
            if(savedItem[1] == equipSlots.HEAD){
                newInstance = instance_create(-10,-10,savedItem[0]);
                newInstance.health_bonus = savedItem[2];
                global.inventory[i,j] = newInstance;
            }
            
            if(savedItem[1] == equipSlots.CHEST){
                newInstance = instance_create(-10,-10,savedItem[0]);
                newInstance.health_bonus = savedItem[2];
                global.inventory[i,j] = newInstance;
            }
            
            if(savedItem[1] == equipSlots.LEGS){
                newInstance = instance_create(-10,-10,savedItem[0]);
                newInstance.health_bonus = savedItem[2];
                global.inventory[i,j] = newInstance;
            }
            
            if(savedItem[1] == equipSlots.FEET){
                newInstance = instance_create(-10,-10,savedItem[0]);
                newInstance.health_bonus = savedItem[2];
                global.inventory[i,j] = newInstance;
            }
            
            if(savedItem[1] == equipSlots.GLOVES){
                newInstance = instance_create(-10,-10,savedItem[0]);
                newInstance.health_bonus = savedItem[2];
                global.inventory[i,j] = newInstance;
            }
        }
    }
}

//LOADING EQUIPPED ITEMS
if (savedEquippedItems[equipSlots.WEAPON] != -1){
    savedItem = savedEquippedItems[equipSlots.WEAPON];
    newInstance = instance_create(-10,-10,savedItem[0]);
    newInstance.damage = savedItem[2];
    newInstance.fireRate = savedItem[3];
    newInstance.currentAmmo = savedItem[4];
    global.equippedItems[equipSlots.WEAPON] = newInstance;
}

if (savedEquippedItems[equipSlots.HEAD] != -1){
    savedItem = savedEquippedItems[equipSlots.HEAD];
    newInstance = instance_create(-10,-10,savedItem[0]);
    newInstance.health_bonus = savedItem[2];
    global.equippedItems[equipSlots.HEAD] = newInstance;
    
}

if (savedEquippedItems[equipSlots.CHEST] != -1){
    savedItem = savedEquippedItems[equipSlots.CHEST];
    newInstance = instance_create(-10,-10,savedItem[0]);
    newInstance.health_bonus = savedItem[2];
    global.equippedItems[equipSlots.CHEST] = newInstance;
    
}

if (savedEquippedItems[equipSlots.LEGS] != -1){
    savedItem = savedEquippedItems[equipSlots.LEGS];
    newInstance = instance_create(-10,-10,savedItem[0]);
    newInstance.health_bonus = savedItem[2];
    global.equippedItems[equipSlots.LEGS] = newInstance;
    
}

if (savedEquippedItems[equipSlots.FEET] != -1){
    savedItem = savedEquippedItems[equipSlots.FEET];
    newInstance = instance_create(-10,-10,savedItem[0]);
    newInstance.health_bonus = savedItem[2];
    global.equippedItems[equipSlots.FEET] = newInstance;
    
}

if (savedEquippedItems[equipSlots.GLOVES] != -1){
    savedItem = savedEquippedItems[equipSlots.GLOVES];
    newInstance = instance_create(-10,-10,savedItem[0]);
    newInstance.health_bonus = savedItem[2];
    global.equippedItems[equipSlots.GLOVES] = newInstance;
    
}

if(instance_exists(obj_Player)){
    obj_Player.health = global.savedHealth;
    obj_Player.maxHealth = global.savedMaxHealth;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(view_xport[0], view_yport[0], "X: " + string(mouse_x - view_xview[0]) + "Y: " + string(mouse_y - view_yview[0]));

if (showInv){
    //draw box inventory is contained in
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_rectangle(x1,y1,x2,y2,0);
    draw_set_color(c_black);
    draw_set_alpha(0.8);
    draw_rectangle(x1,y1,x2,y2,0);
    draw_set_alpha(1);
    
    //draw rubles amount
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_sprite_ext(spr_SmallRublePile, 0,x1 + 30, (y1 + y2) / 2, 1.5, 1.5, 0,c_white,1);
    draw_text(x1 + 10, (y1 + y2) / 2 - 10, "        " + string(rubles));
    
    //draw inventory for pickups
    for (i = 0; i &lt; 4; i++){
        for (j = 0; j &lt; 4; j++){
            //draw box
            draw_sprite_ext(spr_Border,0,x1 + initOff + (i * initSpace), y1 + initOff + (j * initSpace),2,2,0,c_white,1);
            if (global.inventory[i,j] != -1){
                var rot = 0;
                //maybe change rotation based on size
                var scale = 1;
                scale = min((boxDimension - 12) / global.inventory[i,j].sprite_width, (boxDimension - 12) / global.inventory[i,j].sprite_height);
                //draw sprite of item in the slot
                draw_sprite_ext(global.inventory[i,j].sprite_index, 1, x1 + initOff + (i * initSpace), y1 + initOff + (j * initSpace),scale,scale,rot,c_white,1);
            }
        }
    }
    
    //draw boxes for equippable items
    for (i = 0; i &lt; 4; i++){
        draw_sprite_ext(spr_Border,0,midx, midy + initOff + (i * initSpace),2,2,0,c_white,1);//HEAD CHEST LEGS FEET
    }
    draw_sprite_ext(spr_Border,0,midx + initSpace, midy + initOff + initSpace,2,2,0,c_white,1);//WEAPON
    draw_sprite_ext(spr_Border,0,midx - initSpace, midy + initOff + initSpace,2,2,0,c_white,1);//GLOVES
    
    //draw actual sprite for equippable items
    for (i = 0; i &lt; 6; i++){
        if(global.equippedItems[i] != -1){
            var scale = 1;
            scale = min((boxDimension - 12) / global.equippedItems[i].sprite_width, (boxDimension - 12) / global.equippedItems[i].sprite_height);
            
            if(i == equipSlots.HEAD){
                draw_sprite_ext(global.equippedItems[i].sprite_index, 1, midx, midy + initOff + (0 * initSpace),scale,scale,0,c_white,1);
            }
            if(i == equipSlots.CHEST){
                draw_sprite_ext(global.equippedItems[i].sprite_index, 1, midx, midy + initOff + (1 * initSpace),scale,scale,0,c_white,1);
            }
            if(i == equipSlots.LEGS){
                draw_sprite_ext(global.equippedItems[i].sprite_index, 1, midx, midy + initOff + (2 * initSpace),scale,scale,0,c_white,1);
            }
            if(i == equipSlots.FEET){
                draw_sprite_ext(global.equippedItems[i].sprite_index, 1, midx, midy + initOff + (3 * initSpace),scale,scale,0,c_white,1);
            }
            if(i == equipSlots.WEAPON){
                draw_sprite_ext(global.equippedItems[i].sprite_index, 1, midx + initSpace, midy + initOff + (1 * initSpace),scale,scale,0,c_white,1);
            }
            if(i == equipSlots.GLOVES){
                draw_sprite_ext(global.equippedItems[i].sprite_index, 1, midx - initSpace, midy + initOff + (1 * initSpace),scale,scale,0,c_white,1);
            } 
        }
    }
    
    //draw in greyed out versions of equipment to show where to place items
    if(global.equippedItems[global.equipSlots.HEAD] == -1){
        var scale = 1;
        scale = min((boxDimension - 12) / sprite_get_width(spr_Helmet), (boxDimension - 12) / sprite_get_height(spr_Helmet));
        draw_sprite_ext(spr_Helmet, 1, midx, midy + initOff + (0 * initSpace),scale,scale,0,c_white,0.25);
    }
    
    if(global.equippedItems[global.equipSlots.WEAPON] == -1){
        var scale = 1;
        scale = min((boxDimension - 12) / sprite_get_width(spr_AR15), (boxDimension - 12) / sprite_get_height(spr_AR15));
        draw_sprite_ext(spr_AR15, 1, midx + initSpace, midy + initOff + (1 * initSpace),scale,scale,0,c_white,0.25);
    }
    
    if(global.equippedItems[global.equipSlots.CHEST] == -1){
        var scale = 1;
        scale = min((boxDimension - 12) / sprite_get_width(spr_ChestArmor), (boxDimension - 12) / sprite_get_height(spr_ChestArmor));
        draw_sprite_ext(spr_ChestArmor, 1, midx, midy + initOff + (1 * initSpace),scale,scale,0,c_white,0.25);
    }
    
    if(global.equippedItems[global.equipSlots.LEGS] == -1){
        var scale = 1;
        scale = min((boxDimension - 12) / sprite_get_width(spr_LegArmor), (boxDimension - 12) / sprite_get_height(spr_LegArmor));
        draw_sprite_ext(spr_LegArmor, 1, midx, midy + initOff + (2 * initSpace),scale,scale,0,c_white,0.25);
    }
    
    if(global.equippedItems[global.equipSlots.FEET] == -1){
        var scale = 1;
        scale = min((boxDimension - 12) / sprite_get_width(spr_Boots), (boxDimension - 12) / sprite_get_height(spr_Boots));
        draw_sprite_ext(spr_Boots, 1, midx, midy + initOff + (3 * initSpace),scale,scale,0,c_white,0.25);
    }
    
    if(global.equippedItems[global.equipSlots.GLOVES] == -1){
        var scale = 1;
        scale = min((boxDimension - 12) / sprite_get_width(spr_Gloves), (boxDimension - 12) / sprite_get_height(spr_Gloves));
        draw_sprite_ext(spr_Gloves, 1, midx - initSpace, midy + initOff + (1 * initSpace),scale,scale,0,c_white,0.25);
    }
    
    //draw item if we are holding one
    if (global.objectHeld != -1){
        var scale = 1;
        scale = min((boxDimension - 12) / global.objectHeld.sprite_width, (boxDimension - 12) / global.objectHeld.sprite_height);
        //draw_sprite_ext(global.objectHeld.sprite_index, 0, mouse_x, mouse_y,2,2,0,c_white,1);
        draw_sprite_ext(global.objectHeld.sprite_index, 1, m_x, m_y,scale,scale,0,c_white,1);
    }
    
    //m_x = window_view_mouse_get_x(view_current);
    //m_y = window_view_mouse_get_y(view_current);
    
    //for displaying box with item info inside of it
    if(displayItemInfo){
        var displayBoxWidth = 300;
        var displayBoxHeight = 100;
        var lineOffset = 20;
        var sellingPrice = floor(itemToDisplay.price * 0.5);
    
        if(itemToDisplay.itemType == equipSlots.WEAPON){
            draw_set_color(c_black);
            draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            //draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            draw_set_color(c_white);
            draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 0, "Damage: " + string(itemToDisplay.damage));
            if (itemToDisplay.fireRate == 0){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Fire Rate: Semi Auto" );
            }else{
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Fire Rate: " + string(itemToDisplay.fireRate) + " per second");
            }
            if(itemCanBeSold){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 2, "Selling Price: " + string(sellingPrice) + " (Right Click)");
            }
            
        }
        if(itemToDisplay.itemType == equipSlots.HEAD){
            draw_set_color(c_black);
            draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            draw_set_color(c_white);
            draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 0, "Health: " + string(itemToDisplay.health_bonus));
            if (itemCanBeSold){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Selling Price: " + string(sellingPrice) + " (Right Click)");
            }
        }
        
        if(itemToDisplay.itemType == equipSlots.CHEST){
            draw_set_color(c_black);
            draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            draw_set_color(c_white);
            draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 0, "Health: " + string(itemToDisplay.health_bonus));
            if (itemCanBeSold){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Selling Price: " + string(sellingPrice) + " (Right Click)");
            }
        }
        
        if(itemToDisplay.itemType == equipSlots.LEGS){
            draw_set_color(c_black);
            draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            draw_set_color(c_white);
            draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 0, "Health: " + string(itemToDisplay.health_bonus));
            if (itemCanBeSold){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Selling Price: " + string(sellingPrice) + " (Right Click)");
            }
        }
        
        if(itemToDisplay.itemType == equipSlots.FEET){
            draw_set_color(c_black);
            draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            draw_set_color(c_white);
            draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 0, "Health: " + string(itemToDisplay.health_bonus));
            if (itemCanBeSold){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Selling Price: " + string(sellingPrice) + " (Right Click)");
            }
        }
        
        if(itemToDisplay.itemType == equipSlots.GLOVES){
            draw_set_color(c_black);
            draw_rectangle(m_x, m_y, m_x - displayBoxWidth, m_y + displayBoxHeight,0);
            draw_set_color(c_white);
            draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 0, "Health: " + string(itemToDisplay.health_bonus));
            if (itemCanBeSold){
                draw_text(m_x - (displayBoxWidth - 10), m_y + lineOffset * 1, "Selling Price: " + string(sellingPrice) + " (Right Click)");
            }
        }
    }
    draw_set_color(c_black);
    
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
